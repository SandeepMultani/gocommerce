version: '3.4'

services:

    cataloguedb:
      image: mongo
      container_name: cataloguedb
      restart: always
      networks: 
        - infra
      environment:
        MONGO_INITDB_ROOT_USERNAME: catalogrootusr
        MONGO_INITDB_ROOT_PASSWORD: catalogrootusrpwd
        MONGO_DATA_DIR: /data/db
      volumes:
        - cataloguedbdata01:/data/db
      ports:
        - "27017:27017"
    
    cataloguedbui:
      image: mongo-express
      container_name: cataloguedbui
      restart: always
      networks: 
        - infra
      ports:
        - 8081:8081
      environment:
        ME_CONFIG_MONGODB_SERVER: cataloguedb
        ME_CONFIG_MONGODB_PORT: 27017
        ME_CONFIG_MONGODB_ADMINUSERNAME: catalogrootusr
        ME_CONFIG_MONGODB_ADMINPASSWORD: catalogrootusrpwd
        ME_CONFIG_BASICAUTH_USERNAME: catalogusr
        ME_CONFIG_BASICAUTH_PASSWORD: catalogusrpwd
        ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"

    basketdb:
      image: redis
      container_name: basketdb
      restart: always
      networks: 
        - infra    
      volumes:
        - basketdbdata01:/usr/share/redis/data
      ports:
        - "6379:6379"

    zookeeper:
      image: zookeeper:3.4.9
      container_name: zookeeper
      restart: always
      networks: 
        - infra
      ports:
        - "2181:2181"
      environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
      volumes:
        - kafkadata0z:/data
        - kafkadata0z:/datalog

    kafka1:
      image: confluentinc/cp-kafka:5.3.0
      container_name: kafka1
      restart: always
      networks: 
        - infra
      ports:
        - "9091:9091"
      environment:
        KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
        KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
        KAFKA_BROKER_ID: 1
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      volumes:
        - kafkadata01:/var/lib/kafka/data
      depends_on:
        - zookeeper

    kafka2:
      image: confluentinc/cp-kafka:5.3.0
      container_name: kafka2
      restart: always
      networks: 
        - infra
      ports:
        - "9092:9092"
      environment:
        KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_BROKER_ID: 2
      volumes:
        - kafkadata02:/var/lib/kafka/data
      depends_on:
        - zookeeper 
    
    kafdrop:
      image: obsidiandynamics/kafdrop
      container_name: kafdrop
      restart: always
      networks: 
        - infra
      ports:
        - "9000:8082"
      environment:
        KAFKA_BROKERCONNECT: "kafka1:19091"
      depends_on:
        - kafka1
        - kafka2

    datawarehouse:
      image: "postgres"
      container_name: datawarehouse
      restart: always
      networks: 
        - infra
      ports:
        - 5432:5432
      environment:
        POSTGRES_USER: postgresusr
        POSTGRES_PASSWORD: postgrespass
        POSTGRES_DB: datawarehouse
      volumes:
        - datawarehousedata01:/var/lib/postgresql/data/

    datawarehouseui:
      container_name: datawarehouseui
      image: dpage/pgadmin4
      restart: always
      networks: 
        - infra
      environment:
        PGADMIN_DEFAULT_EMAIL: admin@admin.com
        PGADMIN_DEFAULT_PASSWORD: pgadminpass
      ports:
        - "5050:8083"    
        
    seq:
      image: datalust/seq:latest
      container_name: seq
      restart: always
      networks: 
        - infra
      environment:
        ACCEPT_EULA: "Y"
      volumes:
        - seqdata01:/usr/share/seq/data
      ports:
        - 5341:5341
        - 8080:80

    elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0
      container_name: elasticsearch
      environment:
        - discovery.type=single-node
        - http.port=9200
        - http.cors.enabled=true
        - http.cors.allow-origin=http://localhost:1358,http://127.0.0.1:1358
        - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
        - http.cors.allow-credentials=true
        - bootstrap.memory_lock=true
        - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      volumes:
        - esdata01:/usr/share/elasticsearch/data
      ports:
        - 9200:9200
        - 9300:9300
      networks:
        - infra
        
    elasticsearchui:
      image: appbaseio/dejavu:3.3.1
      container_name: elasticsearchui
      ports:
        - 1358:8084
      depends_on:
        - elasticsearch
      networks:
        - infra    
        
volumes:
  cataloguedbdata01:
    driver: local
  basketdbdata01:
    driver: local
  datawarehousedata01: 
    driver: local
  kafkadata0z:
    driver: local
  kafkadata01:
    driver: local
  kafkadata02:
    driver: local
  seqdata01:
    driver: local
  esdata01:
    driver: local  

networks:
  infra:
    driver: bridge  